# the name of the role.
name: single

# description of the role.
description: Build machine

# name of the user for EC2 SSH login.
user: ec2-user

# AWS information for AWS instances in this role.
# can be overridden in the role.create_instance() call.
aws:
  ami_id: ami-1624987f  # Amazon Linux AMI
  key_name: main
  security_groups: [dojo_web, dojo_cidr]
  instance_type: t1.micro

# describes how to provision instances in this role.
provision:
  # tools to install on the instance.
  - tools:
      command: install
      options: [
          __update_packages__, reboot, key_pair, easy_install, python2.7,
          pip, virtualenv, git, gcc, make, python27-devel, mysql, mysql-devel,
          supervisord, nginx, redis
        ]

  # reboot necessary to get supervisor up and running prior to redis config.
  - reboot:

  - redis:
      command: config
      options:
        daemonize: yes
        port: 6379
        timeout: 0
        loglevel: notice
        logfile: /tmp/redis-server.log
        databases: 1
        maxmemory: 20mb
        maxmemory-policy: allkeys-lru
        maxmemory-samples: 3

  # installs a private key on the instance that will be used for git commands.
  - git:
      command: install_key_file
      local_key_file: /Users/Rick/.ssh/id_rsa_dojo_machine_user

  # clone all repos listed in context.yaml.
  - git:
      command: clone_all

# describes how to execute a build for instances in this role.
# this section includes either "plan" or "copy_from", but not both.
build:
  - git:
      # could also pull one or more specific repos.
      command: pull_all

  - python_build:
      command: build

      # repos to build.
      repos: [dojo_prod]

      # reference repo whose commit ID is used in the build name.
      # if not specified the first repo in the context is used.
      reference_repo: dojo_prod

      # python interpreter to use in the build virtualenv.
      # if not specified, uses the default python interpreter.
      interpreter: python2.7

      # how to run build unittests.
      unittest: cmd

      # if True, creates a tarball of a successful build.
      # must be True if any other roles expect to "copy_from" this instance.
      tarball: True

      # specifies a list of commands to execute post-build, with the build virtualenv activated.
      # commands are executed in the order listed. each item in the list must specify "command",
      # and can also specify "sudo: True". if the command fails then build is terminated unless
      # "ignore_fail: True" is set.
      post_build:

# describes how to activate/deploy a build.
activate:
  - nginx_gunicorn:
      command: activate
      name: web
      gunicorn:
        # the gunicorn command to execute; defaults to "gunicorn".
        script: gunicorn

        # specifies the gunicorn module:variable to run.
        app_module: app:app

        # gunicorn "long-name" options. these are the same as the option names preceded with double-dash,
        # i.e., use "name" and not "n". "bind" cannot be set because it's set automatically.
        # "name" and "workers" have intelligent defaults, but can be overridden here.
        options:
          debug: True
          log-level: DEBUG

        # causes the gunicorn server to be verified by sending an HTTP HEAD request with this path. if a
        # if a 200, 300, or 400 response is received then activation proceeds. if not specified, activation
        # proceeds as soon as the gunicorn process is running.
        http_test_path: /fitness/

      # Nginx-specific configuration.
      nginx:
        # where Nginx should listen for connections; if not specified defaults to 80.
        listen: 80

        # domain in which Nginx listens; if not specified defaults to the instance public DNS name.
        #server_names: None

        static:
          - url: /static/
            local: app/static/
